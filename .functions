# Create datauri from file
function datauri(){
    echo -n `$1` | base64 | pbcopy;
}
# bypass GateKeeper
function bypass(){
	xattr -d com.apple.quarantine $1
}

function ip(){
    dig +short myip.opendns.com @resolver1.opendns.com | pbcopy
}


function startupapps(){
  
  # open required apps
  for app in "ControlPlane" "Quicksilver" "Bartender" "PopClip" "Typinator" "Fantastical" "BetterTouchTool" "ClustersHelper" "HazelHelper" "TotalTerminal" "MAMP";
    do open -a "$app"
  done

  sudo postfix start;

}

# optimise for battery
function lowpower(){

    # quit unneeded apps
    for app in "Fresh" "Bartender" "Calendar" "Dropbox" "Mail" "Sparrow Lite" "AirMail Beta" "Breeze" "Activity Monitor" "Sip" "Radium" "Typinator" "PopClip" "Dock" "MagicPrefs";
     do killall "$app" > /dev/null 2>&1
    done

    # Turn bluetooth off
    # requires blueutil: http://www.frederikseiffert.de/blueutil/
    blueutil off

    # turn wifi off
    networksetup -setairportpower en1 off

    # stop hazel
    defaults write com.noodlesoft.HazelHelper RunState -bool NO;killall HazelHelper;open -a HazelHelper
    
}


function highpower(){

    # open required apps
    for app in "Bartender" "Fresh" "Dropbox" "Breeze" "Vitamin-R" "Sip" "PopClip" "Typinator" "MagicPrefs";
     do open -a "$app"
    done

    # Turn bluetooth on
    # requires blueutil: http://www.frederikseiffert.de/blueutil/
    blueutil on


    # turn wifi on
    networksetup -setairportpower en1 on

    # Start hazel
    defaults write com.noodlesoft.HazelHelper RunState -bool YES;killall HazelHelper;open -a HazelHelper
}

function evening(){
     ejectall;
     boff;
}

###########
# WEB DEV
###########

function installgrunt(){
    # add create package file

    # Grunt 0.4a
    sudo npm install grunt --save-dev
    
    # Grunt 0.3
    #sudo npm install grunt --save-dev

    #sudo npm install grunt-recess
    sudo npm install grunt-contrib-less --save-dev
    sudo npm install grunt-css --save-dev
    sudo npm install grunt-minified --save-dev
    sudo npm install grunt-text-replace --save-dev
    sudo npm install grunt-modernizr --save-dev
    #sudo npm install grunt-bump --save-dev
    #sudo npm install grunt-hashres --save-dev
    
    #sudo npm install grunt-crusher --save-dev
    #sudo npm install grunt-img --save-dev
    #sudo npm install grunt-contrib-imagemin --save-dev
}

# Create a new directory and enter it
function md() {
	mkdir -p "$@" && cd "$@"
}


# find shorthand
function f() {
    find . -name "$1"
}

# cd into whatever is the forefront Finder window.
cdf() {  # short for cdfinder
  cd "`osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)'`"
}


# lets toss an image onto my server and pbcopy that bitch.
function scpp() {
    scp "$1" aurgasm@aurgasm.us:~/paulirish.com/i;
    echo "http://paulirish.com/i/$1" | pbcopy;
    echo "Copied to clipboard: http://paulirish.com/i/$1"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	open "http://localhost:${port}/"
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}


# Quick Commit
function gcom(){
    git add -A;
    git commit -m "$1";
    echo "\nCommit $1 completed";
}

# Git amend
function gamend(){
   git commit --amend -am "$1"
   echo "Commit Updated: $1";
}

# Git changed files
function gchanged(){
  git diff --name-only
}
function gdiff(){
  git diff --name-only
}

# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}


# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
	encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Syntax-highlight JSON strings or files
function json() {
	if [ -p /dev/stdin ]; then
		# piping, e.g. `echo '{"foo":42}' | json`
		python -mjson.tool | pygmentize -l javascript
	else
		# e.g. `json '{"foo":42}'`
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	fi
}


# take this repo and copy it to somewhere else minus the .git stuff.
function gitexport(){
	mkdir -p "$1"
	git archive master | tar -x -C "$1"
}




#################
# CUSTOM
########

function replacepb() {
    pbpaste >> ~/Desktop/temp-find-replace.txt

    # find and replace based on supplied regex
    sed s/"$1"// ~/Desktop/temp-find-replace.txt
}


function mamplog(){
    mv /Applications/MAMP/logs/php_error.log /Applications/MAMP/logs/php_error-`date +%Y-%m%d_%H-%M`.log
    touch /Applications/MAMP/logs/php_error.log
}
function phplog(){
    mv /Applications/MAMP/logs/php_error.log /Applications/MAMP/logs/php_error-`date +%Y-%m%d_%H-%M`.log
    touch /Applications/MAMP/logs/php_error.log
}
#############
# remove text matching a regex from the pasteboard
#
#  e.g. replace whitespace at start of each line use:
#
#  '^[ \t]*'
#
############
function removepb() {
    pbpaste > ~/Desktop/temp-find-replace.txt

    # find and replace based on supplied regex
    sed s/"$1"// ~/Desktop/temp-find-replace.txt | pbcopy
    # paste converted text to temp file
    #pbpaste > ~/Desktop/temp-find-replace.txt
}



# get gzipped size
function gz() {
	echo "orig size    (bytes): "
	cat "$1" | wc -c
	echo "gzipped size (bytes): "
	gzip -c "$1" | wc -c
}

# All the dig info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	echo # newline
}

# Extract archives - use: extract <file>
# Credits to http://dotfiles.org/~pseup/.bashrc
function extract() {
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2) tar xjf $1 ;;
			*.tar.gz) tar xzf $1 ;;
			*.bz2) bunzip2 $1 ;;
			*.rar) rar x $1 ;;
			*.gz) gunzip $1 ;;
			*.tar) tar xf $1 ;;
			*.tbz2) tar xjf $1 ;;
			*.tgz) tar xzf $1 ;;
			*.zip) unzip $1 ;;
			*.Z) uncompress $1 ;;
			*.7z) 7z x $1 ;;
			*) echo "'$1' cannot be extracted via extract()" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

# Amazon glacier-cli
# https://github.com/basak/glacier-cli/blob/master/README.md

function glacierupload(){
   if [ -f $1 ] ; then
  	glacier archive upload $2 $1
   else
     echo "'$1' is not a valid file"
     echo "Usage: glacierupload() [PATH_TO_FILE] [VAULT]"
   fi
}

function glacierlistphotos(){
    glacier archive list photos
}

# Security
function bitbucketpwd(){
    security find-internet-password -a jonhorner -s bitbucket.org -w
}